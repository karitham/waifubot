// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: queries.sql

package users

import (
	"context"
)

const consumeTokens = `-- name: ConsumeTokens :one
UPDATE users
SET
  tokens = tokens - $1
WHERE
  user_id = $2
RETURNING
  id, user_id, quote, date, favorite, tokens, anilist_url
`

type ConsumeTokensParams struct {
	Tokens int32
	UserID uint64
}

func (q *Queries) ConsumeTokens(ctx context.Context, arg ConsumeTokensParams) (User, error) {
	row := q.db.QueryRow(ctx, consumeTokens, arg.Tokens, arg.UserID)
	var i User
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Quote,
		&i.Date,
		&i.Favorite,
		&i.Tokens,
		&i.AnilistUrl,
	)
	return i, err
}

const create = `-- name: Create :exec
INSERT INTO
  users (user_id)
VALUES
  ($1)
`

func (q *Queries) Create(ctx context.Context, userID uint64) error {
	_, err := q.db.Exec(ctx, create, userID)
	return err
}

const get = `-- name: Get :one
SELECT
  id, user_id, quote, date, favorite, tokens, anilist_url
FROM
  users
WHERE
  user_id = $1
`

func (q *Queries) Get(ctx context.Context, userID uint64) (User, error) {
	row := q.db.QueryRow(ctx, get, userID)
	var i User
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Quote,
		&i.Date,
		&i.Favorite,
		&i.Tokens,
		&i.AnilistUrl,
	)
	return i, err
}

const getByAnilist = `-- name: GetByAnilist :one
SELECT
  id, user_id, quote, date, favorite, tokens, anilist_url
FROM
  users
WHERE
  users.anilist_url = $1
`

func (q *Queries) GetByAnilist(ctx context.Context, anilistUrl string) (User, error) {
	row := q.db.QueryRow(ctx, getByAnilist, anilistUrl)
	var i User
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Quote,
		&i.Date,
		&i.Favorite,
		&i.Tokens,
		&i.AnilistUrl,
	)
	return i, err
}

const incTokens = `-- name: IncTokens :exec
UPDATE users
SET
  tokens = tokens + 1
WHERE
  user_id = $1
`

func (q *Queries) IncTokens(ctx context.Context, userID uint64) error {
	_, err := q.db.Exec(ctx, incTokens, userID)
	return err
}
